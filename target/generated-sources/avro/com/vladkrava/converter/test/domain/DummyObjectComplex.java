/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.vladkrava.converter.test.domain;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Dummy Object with complex types */
@org.apache.avro.specific.AvroGenerated
public class DummyObjectComplex extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5507809011491670599L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DummyObjectComplex\",\"namespace\":\"com.vladkrava.converter.test.domain\",\"doc\":\"Dummy Object with complex types\",\"fields\":[{\"name\":\"testPrimitives\",\"type\":{\"type\":\"record\",\"name\":\"DummyObjectPrimitives\",\"doc\":\"Dummy Object with primitive types\",\"fields\":[{\"name\":\"testString\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"testInt\",\"type\":\"int\"},{\"name\":\"testLong\",\"type\":\"long\"},{\"name\":\"testFloat\",\"type\":\"float\"},{\"name\":\"testDouble\",\"type\":\"double\"},{\"name\":\"testBoolean\",\"type\":\"boolean\",\"default\":false},{\"name\":\"testBytes\",\"type\":\"bytes\"}]}},{\"name\":\"testString\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"testEnum\",\"type\":{\"type\":\"enum\",\"name\":\"TestEnum\",\"symbols\":[\"YES\",\"NO\",\"NONE\"]}},{\"name\":\"testUnion\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"testMap\",\"type\":{\"type\":\"map\",\"values\":\"float\",\"avro.java.string\":\"String\"}},{\"name\":\"testList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"InnerClass\",\"fields\":[{\"name\":\"testName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"testId\",\"type\":\"long\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DummyObjectComplex> ENCODER =
      new BinaryMessageEncoder<DummyObjectComplex>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DummyObjectComplex> DECODER =
      new BinaryMessageDecoder<DummyObjectComplex>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DummyObjectComplex> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DummyObjectComplex> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DummyObjectComplex>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DummyObjectComplex to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DummyObjectComplex from a ByteBuffer. */
  public static DummyObjectComplex fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private com.vladkrava.converter.test.domain.DummyObjectPrimitives testPrimitives;
   private java.lang.String testString;
   private com.vladkrava.converter.test.domain.TestEnum testEnum;
   private java.lang.Double testUnion;
   private java.util.Map<java.lang.String,java.lang.Float> testMap;
   private java.util.List<com.vladkrava.converter.test.domain.InnerClass> testList;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DummyObjectComplex() {}

  /**
   * All-args constructor.
   * @param testPrimitives The new value for testPrimitives
   * @param testString The new value for testString
   * @param testEnum The new value for testEnum
   * @param testUnion The new value for testUnion
   * @param testMap The new value for testMap
   * @param testList The new value for testList
   */
  public DummyObjectComplex(com.vladkrava.converter.test.domain.DummyObjectPrimitives testPrimitives, java.lang.String testString, com.vladkrava.converter.test.domain.TestEnum testEnum, java.lang.Double testUnion, java.util.Map<java.lang.String,java.lang.Float> testMap, java.util.List<com.vladkrava.converter.test.domain.InnerClass> testList) {
    this.testPrimitives = testPrimitives;
    this.testString = testString;
    this.testEnum = testEnum;
    this.testUnion = testUnion;
    this.testMap = testMap;
    this.testList = testList;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return testPrimitives;
    case 1: return testString;
    case 2: return testEnum;
    case 3: return testUnion;
    case 4: return testMap;
    case 5: return testList;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: testPrimitives = (com.vladkrava.converter.test.domain.DummyObjectPrimitives)value$; break;
    case 1: testString = (java.lang.String)value$; break;
    case 2: testEnum = (com.vladkrava.converter.test.domain.TestEnum)value$; break;
    case 3: testUnion = (java.lang.Double)value$; break;
    case 4: testMap = (java.util.Map<java.lang.String,java.lang.Float>)value$; break;
    case 5: testList = (java.util.List<com.vladkrava.converter.test.domain.InnerClass>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'testPrimitives' field.
   * @return The value of the 'testPrimitives' field.
   */
  public com.vladkrava.converter.test.domain.DummyObjectPrimitives getTestPrimitives() {
    return testPrimitives;
  }


  /**
   * Gets the value of the 'testString' field.
   * @return The value of the 'testString' field.
   */
  public java.lang.String getTestString() {
    return testString;
  }


  /**
   * Gets the value of the 'testEnum' field.
   * @return The value of the 'testEnum' field.
   */
  public com.vladkrava.converter.test.domain.TestEnum getTestEnum() {
    return testEnum;
  }


  /**
   * Gets the value of the 'testUnion' field.
   * @return The value of the 'testUnion' field.
   */
  public java.lang.Double getTestUnion() {
    return testUnion;
  }


  /**
   * Gets the value of the 'testMap' field.
   * @return The value of the 'testMap' field.
   */
  public java.util.Map<java.lang.String,java.lang.Float> getTestMap() {
    return testMap;
  }


  /**
   * Gets the value of the 'testList' field.
   * @return The value of the 'testList' field.
   */
  public java.util.List<com.vladkrava.converter.test.domain.InnerClass> getTestList() {
    return testList;
  }


  /**
   * Creates a new DummyObjectComplex RecordBuilder.
   * @return A new DummyObjectComplex RecordBuilder
   */
  public static com.vladkrava.converter.test.domain.DummyObjectComplex.Builder newBuilder() {
    return new com.vladkrava.converter.test.domain.DummyObjectComplex.Builder();
  }

  /**
   * Creates a new DummyObjectComplex RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DummyObjectComplex RecordBuilder
   */
  public static com.vladkrava.converter.test.domain.DummyObjectComplex.Builder newBuilder(com.vladkrava.converter.test.domain.DummyObjectComplex.Builder other) {
    return new com.vladkrava.converter.test.domain.DummyObjectComplex.Builder(other);
  }

  /**
   * Creates a new DummyObjectComplex RecordBuilder by copying an existing DummyObjectComplex instance.
   * @param other The existing instance to copy.
   * @return A new DummyObjectComplex RecordBuilder
   */
  public static com.vladkrava.converter.test.domain.DummyObjectComplex.Builder newBuilder(com.vladkrava.converter.test.domain.DummyObjectComplex other) {
    return new com.vladkrava.converter.test.domain.DummyObjectComplex.Builder(other);
  }

  /**
   * RecordBuilder for DummyObjectComplex instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DummyObjectComplex>
    implements org.apache.avro.data.RecordBuilder<DummyObjectComplex> {

    private com.vladkrava.converter.test.domain.DummyObjectPrimitives testPrimitives;
    private com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder testPrimitivesBuilder;
    private java.lang.String testString;
    private com.vladkrava.converter.test.domain.TestEnum testEnum;
    private java.lang.Double testUnion;
    private java.util.Map<java.lang.String,java.lang.Float> testMap;
    private java.util.List<com.vladkrava.converter.test.domain.InnerClass> testList;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.vladkrava.converter.test.domain.DummyObjectComplex.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.testPrimitives)) {
        this.testPrimitives = data().deepCopy(fields()[0].schema(), other.testPrimitives);
        fieldSetFlags()[0] = true;
      }
      if (other.hasTestPrimitivesBuilder()) {
        this.testPrimitivesBuilder = com.vladkrava.converter.test.domain.DummyObjectPrimitives.newBuilder(other.getTestPrimitivesBuilder());
      }
      if (isValidValue(fields()[1], other.testString)) {
        this.testString = data().deepCopy(fields()[1].schema(), other.testString);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.testEnum)) {
        this.testEnum = data().deepCopy(fields()[2].schema(), other.testEnum);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.testUnion)) {
        this.testUnion = data().deepCopy(fields()[3].schema(), other.testUnion);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.testMap)) {
        this.testMap = data().deepCopy(fields()[4].schema(), other.testMap);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.testList)) {
        this.testList = data().deepCopy(fields()[5].schema(), other.testList);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DummyObjectComplex instance
     * @param other The existing instance to copy.
     */
    private Builder(com.vladkrava.converter.test.domain.DummyObjectComplex other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.testPrimitives)) {
        this.testPrimitives = data().deepCopy(fields()[0].schema(), other.testPrimitives);
        fieldSetFlags()[0] = true;
      }
      this.testPrimitivesBuilder = null;
      if (isValidValue(fields()[1], other.testString)) {
        this.testString = data().deepCopy(fields()[1].schema(), other.testString);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.testEnum)) {
        this.testEnum = data().deepCopy(fields()[2].schema(), other.testEnum);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.testUnion)) {
        this.testUnion = data().deepCopy(fields()[3].schema(), other.testUnion);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.testMap)) {
        this.testMap = data().deepCopy(fields()[4].schema(), other.testMap);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.testList)) {
        this.testList = data().deepCopy(fields()[5].schema(), other.testList);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'testPrimitives' field.
      * @return The value.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives getTestPrimitives() {
      return testPrimitives;
    }

    /**
      * Sets the value of the 'testPrimitives' field.
      * @param value The value of 'testPrimitives'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectComplex.Builder setTestPrimitives(com.vladkrava.converter.test.domain.DummyObjectPrimitives value) {
      validate(fields()[0], value);
      this.testPrimitivesBuilder = null;
      this.testPrimitives = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'testPrimitives' field has been set.
      * @return True if the 'testPrimitives' field has been set, false otherwise.
      */
    public boolean hasTestPrimitives() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'testPrimitives' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder getTestPrimitivesBuilder() {
      if (testPrimitivesBuilder == null) {
        if (hasTestPrimitives()) {
          setTestPrimitivesBuilder(com.vladkrava.converter.test.domain.DummyObjectPrimitives.newBuilder(testPrimitives));
        } else {
          setTestPrimitivesBuilder(com.vladkrava.converter.test.domain.DummyObjectPrimitives.newBuilder());
        }
      }
      return testPrimitivesBuilder;
    }

    /**
     * Sets the Builder instance for the 'testPrimitives' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.vladkrava.converter.test.domain.DummyObjectComplex.Builder setTestPrimitivesBuilder(com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder value) {
      clearTestPrimitives();
      testPrimitivesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'testPrimitives' field has an active Builder instance
     * @return True if the 'testPrimitives' field has an active Builder instance
     */
    public boolean hasTestPrimitivesBuilder() {
      return testPrimitivesBuilder != null;
    }

    /**
      * Clears the value of the 'testPrimitives' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectComplex.Builder clearTestPrimitives() {
      testPrimitives = null;
      testPrimitivesBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'testString' field.
      * @return The value.
      */
    public java.lang.String getTestString() {
      return testString;
    }

    /**
      * Sets the value of the 'testString' field.
      * @param value The value of 'testString'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectComplex.Builder setTestString(java.lang.String value) {
      validate(fields()[1], value);
      this.testString = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'testString' field has been set.
      * @return True if the 'testString' field has been set, false otherwise.
      */
    public boolean hasTestString() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'testString' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectComplex.Builder clearTestString() {
      testString = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'testEnum' field.
      * @return The value.
      */
    public com.vladkrava.converter.test.domain.TestEnum getTestEnum() {
      return testEnum;
    }

    /**
      * Sets the value of the 'testEnum' field.
      * @param value The value of 'testEnum'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectComplex.Builder setTestEnum(com.vladkrava.converter.test.domain.TestEnum value) {
      validate(fields()[2], value);
      this.testEnum = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'testEnum' field has been set.
      * @return True if the 'testEnum' field has been set, false otherwise.
      */
    public boolean hasTestEnum() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'testEnum' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectComplex.Builder clearTestEnum() {
      testEnum = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'testUnion' field.
      * @return The value.
      */
    public java.lang.Double getTestUnion() {
      return testUnion;
    }

    /**
      * Sets the value of the 'testUnion' field.
      * @param value The value of 'testUnion'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectComplex.Builder setTestUnion(java.lang.Double value) {
      validate(fields()[3], value);
      this.testUnion = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'testUnion' field has been set.
      * @return True if the 'testUnion' field has been set, false otherwise.
      */
    public boolean hasTestUnion() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'testUnion' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectComplex.Builder clearTestUnion() {
      testUnion = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'testMap' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.Float> getTestMap() {
      return testMap;
    }

    /**
      * Sets the value of the 'testMap' field.
      * @param value The value of 'testMap'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectComplex.Builder setTestMap(java.util.Map<java.lang.String,java.lang.Float> value) {
      validate(fields()[4], value);
      this.testMap = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'testMap' field has been set.
      * @return True if the 'testMap' field has been set, false otherwise.
      */
    public boolean hasTestMap() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'testMap' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectComplex.Builder clearTestMap() {
      testMap = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'testList' field.
      * @return The value.
      */
    public java.util.List<com.vladkrava.converter.test.domain.InnerClass> getTestList() {
      return testList;
    }

    /**
      * Sets the value of the 'testList' field.
      * @param value The value of 'testList'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectComplex.Builder setTestList(java.util.List<com.vladkrava.converter.test.domain.InnerClass> value) {
      validate(fields()[5], value);
      this.testList = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'testList' field has been set.
      * @return True if the 'testList' field has been set, false otherwise.
      */
    public boolean hasTestList() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'testList' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectComplex.Builder clearTestList() {
      testList = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DummyObjectComplex build() {
      try {
        DummyObjectComplex record = new DummyObjectComplex();
        if (testPrimitivesBuilder != null) {
          record.testPrimitives = this.testPrimitivesBuilder.build();
        } else {
          record.testPrimitives = fieldSetFlags()[0] ? this.testPrimitives : (com.vladkrava.converter.test.domain.DummyObjectPrimitives) defaultValue(fields()[0]);
        }
        record.testString = fieldSetFlags()[1] ? this.testString : (java.lang.String) defaultValue(fields()[1]);
        record.testEnum = fieldSetFlags()[2] ? this.testEnum : (com.vladkrava.converter.test.domain.TestEnum) defaultValue(fields()[2]);
        record.testUnion = fieldSetFlags()[3] ? this.testUnion : (java.lang.Double) defaultValue(fields()[3]);
        record.testMap = fieldSetFlags()[4] ? this.testMap : (java.util.Map<java.lang.String,java.lang.Float>) defaultValue(fields()[4]);
        record.testList = fieldSetFlags()[5] ? this.testList : (java.util.List<com.vladkrava.converter.test.domain.InnerClass>) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DummyObjectComplex>
    WRITER$ = (org.apache.avro.io.DatumWriter<DummyObjectComplex>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DummyObjectComplex>
    READER$ = (org.apache.avro.io.DatumReader<DummyObjectComplex>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
