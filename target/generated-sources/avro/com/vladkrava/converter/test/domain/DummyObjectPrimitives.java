/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.vladkrava.converter.test.domain;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Dummy Object with primitive types */
@org.apache.avro.specific.AvroGenerated
public class DummyObjectPrimitives extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1740715475787431292L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DummyObjectPrimitives\",\"namespace\":\"com.vladkrava.converter.test.domain\",\"doc\":\"Dummy Object with primitive types\",\"fields\":[{\"name\":\"testString\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"testInt\",\"type\":\"int\"},{\"name\":\"testLong\",\"type\":\"long\"},{\"name\":\"testFloat\",\"type\":\"float\"},{\"name\":\"testDouble\",\"type\":\"double\"},{\"name\":\"testBoolean\",\"type\":\"boolean\",\"default\":false},{\"name\":\"testBytes\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DummyObjectPrimitives> ENCODER =
      new BinaryMessageEncoder<DummyObjectPrimitives>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DummyObjectPrimitives> DECODER =
      new BinaryMessageDecoder<DummyObjectPrimitives>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DummyObjectPrimitives> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DummyObjectPrimitives> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DummyObjectPrimitives>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DummyObjectPrimitives to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DummyObjectPrimitives from a ByteBuffer. */
  public static DummyObjectPrimitives fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String testString;
   private int testInt;
   private long testLong;
   private float testFloat;
   private double testDouble;
   private boolean testBoolean;
   private java.nio.ByteBuffer testBytes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DummyObjectPrimitives() {}

  /**
   * All-args constructor.
   * @param testString The new value for testString
   * @param testInt The new value for testInt
   * @param testLong The new value for testLong
   * @param testFloat The new value for testFloat
   * @param testDouble The new value for testDouble
   * @param testBoolean The new value for testBoolean
   * @param testBytes The new value for testBytes
   */
  public DummyObjectPrimitives(java.lang.String testString, java.lang.Integer testInt, java.lang.Long testLong, java.lang.Float testFloat, java.lang.Double testDouble, java.lang.Boolean testBoolean, java.nio.ByteBuffer testBytes) {
    this.testString = testString;
    this.testInt = testInt;
    this.testLong = testLong;
    this.testFloat = testFloat;
    this.testDouble = testDouble;
    this.testBoolean = testBoolean;
    this.testBytes = testBytes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return testString;
    case 1: return testInt;
    case 2: return testLong;
    case 3: return testFloat;
    case 4: return testDouble;
    case 5: return testBoolean;
    case 6: return testBytes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: testString = (java.lang.String)value$; break;
    case 1: testInt = (java.lang.Integer)value$; break;
    case 2: testLong = (java.lang.Long)value$; break;
    case 3: testFloat = (java.lang.Float)value$; break;
    case 4: testDouble = (java.lang.Double)value$; break;
    case 5: testBoolean = (java.lang.Boolean)value$; break;
    case 6: testBytes = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'testString' field.
   * @return The value of the 'testString' field.
   */
  public java.lang.String getTestString() {
    return testString;
  }


  /**
   * Gets the value of the 'testInt' field.
   * @return The value of the 'testInt' field.
   */
  public java.lang.Integer getTestInt() {
    return testInt;
  }


  /**
   * Gets the value of the 'testLong' field.
   * @return The value of the 'testLong' field.
   */
  public java.lang.Long getTestLong() {
    return testLong;
  }


  /**
   * Gets the value of the 'testFloat' field.
   * @return The value of the 'testFloat' field.
   */
  public java.lang.Float getTestFloat() {
    return testFloat;
  }


  /**
   * Gets the value of the 'testDouble' field.
   * @return The value of the 'testDouble' field.
   */
  public java.lang.Double getTestDouble() {
    return testDouble;
  }


  /**
   * Gets the value of the 'testBoolean' field.
   * @return The value of the 'testBoolean' field.
   */
  public java.lang.Boolean getTestBoolean() {
    return testBoolean;
  }


  /**
   * Gets the value of the 'testBytes' field.
   * @return The value of the 'testBytes' field.
   */
  public java.nio.ByteBuffer getTestBytes() {
    return testBytes;
  }


  /**
   * Creates a new DummyObjectPrimitives RecordBuilder.
   * @return A new DummyObjectPrimitives RecordBuilder
   */
  public static com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder newBuilder() {
    return new com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder();
  }

  /**
   * Creates a new DummyObjectPrimitives RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DummyObjectPrimitives RecordBuilder
   */
  public static com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder newBuilder(com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder other) {
    return new com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder(other);
  }

  /**
   * Creates a new DummyObjectPrimitives RecordBuilder by copying an existing DummyObjectPrimitives instance.
   * @param other The existing instance to copy.
   * @return A new DummyObjectPrimitives RecordBuilder
   */
  public static com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder newBuilder(com.vladkrava.converter.test.domain.DummyObjectPrimitives other) {
    return new com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder(other);
  }

  /**
   * RecordBuilder for DummyObjectPrimitives instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DummyObjectPrimitives>
    implements org.apache.avro.data.RecordBuilder<DummyObjectPrimitives> {

    private java.lang.String testString;
    private int testInt;
    private long testLong;
    private float testFloat;
    private double testDouble;
    private boolean testBoolean;
    private java.nio.ByteBuffer testBytes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.testString)) {
        this.testString = data().deepCopy(fields()[0].schema(), other.testString);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.testInt)) {
        this.testInt = data().deepCopy(fields()[1].schema(), other.testInt);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.testLong)) {
        this.testLong = data().deepCopy(fields()[2].schema(), other.testLong);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.testFloat)) {
        this.testFloat = data().deepCopy(fields()[3].schema(), other.testFloat);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.testDouble)) {
        this.testDouble = data().deepCopy(fields()[4].schema(), other.testDouble);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.testBoolean)) {
        this.testBoolean = data().deepCopy(fields()[5].schema(), other.testBoolean);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.testBytes)) {
        this.testBytes = data().deepCopy(fields()[6].schema(), other.testBytes);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DummyObjectPrimitives instance
     * @param other The existing instance to copy.
     */
    private Builder(com.vladkrava.converter.test.domain.DummyObjectPrimitives other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.testString)) {
        this.testString = data().deepCopy(fields()[0].schema(), other.testString);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.testInt)) {
        this.testInt = data().deepCopy(fields()[1].schema(), other.testInt);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.testLong)) {
        this.testLong = data().deepCopy(fields()[2].schema(), other.testLong);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.testFloat)) {
        this.testFloat = data().deepCopy(fields()[3].schema(), other.testFloat);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.testDouble)) {
        this.testDouble = data().deepCopy(fields()[4].schema(), other.testDouble);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.testBoolean)) {
        this.testBoolean = data().deepCopy(fields()[5].schema(), other.testBoolean);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.testBytes)) {
        this.testBytes = data().deepCopy(fields()[6].schema(), other.testBytes);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'testString' field.
      * @return The value.
      */
    public java.lang.String getTestString() {
      return testString;
    }

    /**
      * Sets the value of the 'testString' field.
      * @param value The value of 'testString'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder setTestString(java.lang.String value) {
      validate(fields()[0], value);
      this.testString = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'testString' field has been set.
      * @return True if the 'testString' field has been set, false otherwise.
      */
    public boolean hasTestString() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'testString' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder clearTestString() {
      testString = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'testInt' field.
      * @return The value.
      */
    public java.lang.Integer getTestInt() {
      return testInt;
    }

    /**
      * Sets the value of the 'testInt' field.
      * @param value The value of 'testInt'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder setTestInt(int value) {
      validate(fields()[1], value);
      this.testInt = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'testInt' field has been set.
      * @return True if the 'testInt' field has been set, false otherwise.
      */
    public boolean hasTestInt() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'testInt' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder clearTestInt() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'testLong' field.
      * @return The value.
      */
    public java.lang.Long getTestLong() {
      return testLong;
    }

    /**
      * Sets the value of the 'testLong' field.
      * @param value The value of 'testLong'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder setTestLong(long value) {
      validate(fields()[2], value);
      this.testLong = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'testLong' field has been set.
      * @return True if the 'testLong' field has been set, false otherwise.
      */
    public boolean hasTestLong() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'testLong' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder clearTestLong() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'testFloat' field.
      * @return The value.
      */
    public java.lang.Float getTestFloat() {
      return testFloat;
    }

    /**
      * Sets the value of the 'testFloat' field.
      * @param value The value of 'testFloat'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder setTestFloat(float value) {
      validate(fields()[3], value);
      this.testFloat = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'testFloat' field has been set.
      * @return True if the 'testFloat' field has been set, false otherwise.
      */
    public boolean hasTestFloat() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'testFloat' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder clearTestFloat() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'testDouble' field.
      * @return The value.
      */
    public java.lang.Double getTestDouble() {
      return testDouble;
    }

    /**
      * Sets the value of the 'testDouble' field.
      * @param value The value of 'testDouble'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder setTestDouble(double value) {
      validate(fields()[4], value);
      this.testDouble = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'testDouble' field has been set.
      * @return True if the 'testDouble' field has been set, false otherwise.
      */
    public boolean hasTestDouble() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'testDouble' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder clearTestDouble() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'testBoolean' field.
      * @return The value.
      */
    public java.lang.Boolean getTestBoolean() {
      return testBoolean;
    }

    /**
      * Sets the value of the 'testBoolean' field.
      * @param value The value of 'testBoolean'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder setTestBoolean(boolean value) {
      validate(fields()[5], value);
      this.testBoolean = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'testBoolean' field has been set.
      * @return True if the 'testBoolean' field has been set, false otherwise.
      */
    public boolean hasTestBoolean() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'testBoolean' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder clearTestBoolean() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'testBytes' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getTestBytes() {
      return testBytes;
    }

    /**
      * Sets the value of the 'testBytes' field.
      * @param value The value of 'testBytes'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder setTestBytes(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.testBytes = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'testBytes' field has been set.
      * @return True if the 'testBytes' field has been set, false otherwise.
      */
    public boolean hasTestBytes() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'testBytes' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObjectPrimitives.Builder clearTestBytes() {
      testBytes = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DummyObjectPrimitives build() {
      try {
        DummyObjectPrimitives record = new DummyObjectPrimitives();
        record.testString = fieldSetFlags()[0] ? this.testString : (java.lang.String) defaultValue(fields()[0]);
        record.testInt = fieldSetFlags()[1] ? this.testInt : (java.lang.Integer) defaultValue(fields()[1]);
        record.testLong = fieldSetFlags()[2] ? this.testLong : (java.lang.Long) defaultValue(fields()[2]);
        record.testFloat = fieldSetFlags()[3] ? this.testFloat : (java.lang.Float) defaultValue(fields()[3]);
        record.testDouble = fieldSetFlags()[4] ? this.testDouble : (java.lang.Double) defaultValue(fields()[4]);
        record.testBoolean = fieldSetFlags()[5] ? this.testBoolean : (java.lang.Boolean) defaultValue(fields()[5]);
        record.testBytes = fieldSetFlags()[6] ? this.testBytes : (java.nio.ByteBuffer) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DummyObjectPrimitives>
    WRITER$ = (org.apache.avro.io.DatumWriter<DummyObjectPrimitives>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DummyObjectPrimitives>
    READER$ = (org.apache.avro.io.DatumReader<DummyObjectPrimitives>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
