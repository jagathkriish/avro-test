/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.vladkrava.converter.test.domain;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Dummy Object */
@org.apache.avro.specific.AvroGenerated
public class DummyObject extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4309506208145733781L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DummyObject\",\"namespace\":\"com.vladkrava.converter.test.domain\",\"doc\":\"Dummy Object\",\"fields\":[{\"name\":\"testString1\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"testString2\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"TEST_STRING_2\"},{\"name\":\"testArray\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"testInt\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DummyObject> ENCODER =
      new BinaryMessageEncoder<DummyObject>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DummyObject> DECODER =
      new BinaryMessageDecoder<DummyObject>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DummyObject> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DummyObject> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DummyObject>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DummyObject to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DummyObject from a ByteBuffer. */
  public static DummyObject fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String testString1;
   private java.lang.String testString2;
   private java.util.List<java.lang.String> testArray;
   private int testInt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DummyObject() {}

  /**
   * All-args constructor.
   * @param testString1 The new value for testString1
   * @param testString2 The new value for testString2
   * @param testArray The new value for testArray
   * @param testInt The new value for testInt
   */
  public DummyObject(java.lang.String testString1, java.lang.String testString2, java.util.List<java.lang.String> testArray, java.lang.Integer testInt) {
    this.testString1 = testString1;
    this.testString2 = testString2;
    this.testArray = testArray;
    this.testInt = testInt;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return testString1;
    case 1: return testString2;
    case 2: return testArray;
    case 3: return testInt;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: testString1 = (java.lang.String)value$; break;
    case 1: testString2 = (java.lang.String)value$; break;
    case 2: testArray = (java.util.List<java.lang.String>)value$; break;
    case 3: testInt = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'testString1' field.
   * @return The value of the 'testString1' field.
   */
  public java.lang.String getTestString1() {
    return testString1;
  }


  /**
   * Gets the value of the 'testString2' field.
   * @return The value of the 'testString2' field.
   */
  public java.lang.String getTestString2() {
    return testString2;
  }


  /**
   * Gets the value of the 'testArray' field.
   * @return The value of the 'testArray' field.
   */
  public java.util.List<java.lang.String> getTestArray() {
    return testArray;
  }


  /**
   * Gets the value of the 'testInt' field.
   * @return The value of the 'testInt' field.
   */
  public java.lang.Integer getTestInt() {
    return testInt;
  }


  /**
   * Creates a new DummyObject RecordBuilder.
   * @return A new DummyObject RecordBuilder
   */
  public static com.vladkrava.converter.test.domain.DummyObject.Builder newBuilder() {
    return new com.vladkrava.converter.test.domain.DummyObject.Builder();
  }

  /**
   * Creates a new DummyObject RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DummyObject RecordBuilder
   */
  public static com.vladkrava.converter.test.domain.DummyObject.Builder newBuilder(com.vladkrava.converter.test.domain.DummyObject.Builder other) {
    return new com.vladkrava.converter.test.domain.DummyObject.Builder(other);
  }

  /**
   * Creates a new DummyObject RecordBuilder by copying an existing DummyObject instance.
   * @param other The existing instance to copy.
   * @return A new DummyObject RecordBuilder
   */
  public static com.vladkrava.converter.test.domain.DummyObject.Builder newBuilder(com.vladkrava.converter.test.domain.DummyObject other) {
    return new com.vladkrava.converter.test.domain.DummyObject.Builder(other);
  }

  /**
   * RecordBuilder for DummyObject instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DummyObject>
    implements org.apache.avro.data.RecordBuilder<DummyObject> {

    private java.lang.String testString1;
    private java.lang.String testString2;
    private java.util.List<java.lang.String> testArray;
    private int testInt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.vladkrava.converter.test.domain.DummyObject.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.testString1)) {
        this.testString1 = data().deepCopy(fields()[0].schema(), other.testString1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.testString2)) {
        this.testString2 = data().deepCopy(fields()[1].schema(), other.testString2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.testArray)) {
        this.testArray = data().deepCopy(fields()[2].schema(), other.testArray);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.testInt)) {
        this.testInt = data().deepCopy(fields()[3].schema(), other.testInt);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DummyObject instance
     * @param other The existing instance to copy.
     */
    private Builder(com.vladkrava.converter.test.domain.DummyObject other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.testString1)) {
        this.testString1 = data().deepCopy(fields()[0].schema(), other.testString1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.testString2)) {
        this.testString2 = data().deepCopy(fields()[1].schema(), other.testString2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.testArray)) {
        this.testArray = data().deepCopy(fields()[2].schema(), other.testArray);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.testInt)) {
        this.testInt = data().deepCopy(fields()[3].schema(), other.testInt);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'testString1' field.
      * @return The value.
      */
    public java.lang.String getTestString1() {
      return testString1;
    }

    /**
      * Sets the value of the 'testString1' field.
      * @param value The value of 'testString1'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObject.Builder setTestString1(java.lang.String value) {
      validate(fields()[0], value);
      this.testString1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'testString1' field has been set.
      * @return True if the 'testString1' field has been set, false otherwise.
      */
    public boolean hasTestString1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'testString1' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObject.Builder clearTestString1() {
      testString1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'testString2' field.
      * @return The value.
      */
    public java.lang.String getTestString2() {
      return testString2;
    }

    /**
      * Sets the value of the 'testString2' field.
      * @param value The value of 'testString2'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObject.Builder setTestString2(java.lang.String value) {
      validate(fields()[1], value);
      this.testString2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'testString2' field has been set.
      * @return True if the 'testString2' field has been set, false otherwise.
      */
    public boolean hasTestString2() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'testString2' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObject.Builder clearTestString2() {
      testString2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'testArray' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getTestArray() {
      return testArray;
    }

    /**
      * Sets the value of the 'testArray' field.
      * @param value The value of 'testArray'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObject.Builder setTestArray(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.testArray = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'testArray' field has been set.
      * @return True if the 'testArray' field has been set, false otherwise.
      */
    public boolean hasTestArray() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'testArray' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObject.Builder clearTestArray() {
      testArray = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'testInt' field.
      * @return The value.
      */
    public java.lang.Integer getTestInt() {
      return testInt;
    }

    /**
      * Sets the value of the 'testInt' field.
      * @param value The value of 'testInt'.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObject.Builder setTestInt(int value) {
      validate(fields()[3], value);
      this.testInt = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'testInt' field has been set.
      * @return True if the 'testInt' field has been set, false otherwise.
      */
    public boolean hasTestInt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'testInt' field.
      * @return This builder.
      */
    public com.vladkrava.converter.test.domain.DummyObject.Builder clearTestInt() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DummyObject build() {
      try {
        DummyObject record = new DummyObject();
        record.testString1 = fieldSetFlags()[0] ? this.testString1 : (java.lang.String) defaultValue(fields()[0]);
        record.testString2 = fieldSetFlags()[1] ? this.testString2 : (java.lang.String) defaultValue(fields()[1]);
        record.testArray = fieldSetFlags()[2] ? this.testArray : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.testInt = fieldSetFlags()[3] ? this.testInt : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DummyObject>
    WRITER$ = (org.apache.avro.io.DatumWriter<DummyObject>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DummyObject>
    READER$ = (org.apache.avro.io.DatumReader<DummyObject>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
